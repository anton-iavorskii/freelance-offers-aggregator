{"ast":null,"code":"var _jsxFileName = \"/home/anton/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/GitHub/ElbrusHP/freelance_offers/freelance-offers-aggregator/frontend/src/components/BarsChart.jsx\";\nimport React from 'react';\nimport Chart from 'chart.js';\nexport default class BarsChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.chart = undefined;\n    this.calculateScales = this.calculateScales.bind(this);\n  }\n\n  componentDidMount() {\n    this.drawBars(this.props);\n  }\n\n  componentDidUpdate() {\n    this.chart.data.datasets[0].data = this.props.startedByMonths;\n    this.chart.data.datasets[1].data = this.props.finishedByMonths;\n    this.chart.options.scales.yAxes[0].ticks.max = this.calculateScales().chartMax;\n    this.chart.options.scales.yAxes[0].ticks.stepSize = this.calculateScales().stepSize;\n    this.chart.update({\n      duration: 2000\n    });\n  }\n\n  calculateScales() {\n    let chartMax = Math.max(...this.props.startedByMonths, ...this.props.finishedByMonths);\n    chartMax = chartMax + (5 - chartMax % 5);\n    let stepSize = chartMax >= 20 ? 10 : 5;\n    return {\n      chartMax,\n      stepSize\n    };\n  }\n\n  drawBars() {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: 'bar',\n      // The data for our dataset\n      data: {\n        labels: this.props.months,\n        datasets: [{\n          label: 'Начато проектов',\n          backgroundColor: '#0E53A7',\n          borderColor: '#0E53A7',\n          data: this.props.startedByMonths\n        }, {\n          label: 'Завершено проектов',\n          backgroundColor: '#FF9C00',\n          borderColor: '#FF9C00',\n          data: this.props.finishedByMonths\n        }]\n      },\n      // Configuration options go here\n      options: {\n        title: {\n          display: true,\n          text: 'Ваши Проекты',\n          fontSize: 15\n        },\n        legend: {\n          position: 'bottom'\n        },\n        scales: {\n          yAxes: [{\n            scaleStartValue: 0,\n            ticks: {\n              max: this.calculateScales().chartMax,\n              min: 0,\n              stepSize: this.calculateScales().stepSize\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart-container\"\n      /* style={{'position': 'relative', 'height':'300px', 'width':'300px'}} */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      id: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/anton/Документы/GitHub/ElbrusHP/freelance_offers/freelance-offers-aggregator/frontend/src/components/BarsChart.jsx"],"names":["React","Chart","BarsChart","Component","constructor","props","canvasRef","createRef","chart","undefined","calculateScales","bind","componentDidMount","drawBars","componentDidUpdate","data","datasets","startedByMonths","finishedByMonths","options","scales","yAxes","ticks","max","chartMax","stepSize","update","duration","Math","canvas","current","ctx","getContext","clearRect","width","height","type","labels","months","label","backgroundColor","borderColor","title","display","text","fontSize","legend","position","scaleStartValue","min","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js';\n\nexport default class BarsChart extends React.Component {\nconstructor(props) {\n  super(props)\n  this.canvasRef = React.createRef()\n  this.chart = undefined\n  this.calculateScales = this.calculateScales.bind(this)\n}\n  componentDidMount() {\n    this.drawBars(this.props);\n  }\n\n  componentDidUpdate() {\n    this.chart.data.datasets[0].data = this.props.startedByMonths;\n    this.chart.data.datasets[1].data = this.props.finishedByMonths;\n    this.chart.options.scales.yAxes[0].ticks.max = this.calculateScales().chartMax\n    this.chart.options.scales.yAxes[0].ticks.stepSize = this.calculateScales().stepSize\n    this.chart.update({ duration: 2000 });\n  }\n\n  calculateScales() {\n    let chartMax = Math.max(...this.props.startedByMonths,...this.props.finishedByMonths)\n    chartMax = chartMax + (5 - chartMax%5)\n    let stepSize = (chartMax >= 20) ? 10 : 5\n    return { chartMax, stepSize }\n  }\n\n  drawBars() {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    this.chart = new Chart(ctx, {\n      // The type of chart we want to create\n      type: 'bar',\n\n      // The data for our dataset\n      data: {\n        labels: this.props.months,\n        datasets: [\n          {\n            label: 'Начато проектов',\n            backgroundColor: '#0E53A7',\n            borderColor: '#0E53A7',\n            data: this.props.startedByMonths,\n          },\n          {\n            label: 'Завершено проектов',\n            backgroundColor: '#FF9C00',\n            borderColor: '#FF9C00',\n            data: this.props.finishedByMonths,\n          },\n        ]\n      },\n\n      // Configuration options go here\n      options: {\n        title: {\n          display: true,\n          text: 'Ваши Проекты',\n          fontSize: 15,\n        },\n        legend: {\n          position: 'bottom',\n        },\n        scales: {\n          yAxes: [{\n            scaleStartValue: 0,\n            ticks: {\n              max: this.calculateScales().chartMax,\n              min: 0,\n              stepSize: this.calculateScales().stepSize,\n            },\n          }],\n        },\n      }\n    });\n\n  }\n  render() {\n    return (\n      <div className=\"chart-container\" /* style={{'position': 'relative', 'height':'300px', 'width':'300px'}} */>\n        <canvas ref={this.canvasRef} id=\"chart\"></canvas>\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}